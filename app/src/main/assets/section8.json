{
  "tasks": [
    {
      "taskName" : "Object Oriented Programming",
      "taskNumber" : 0,
      "sectionNumber": 8,
      "taskText" : "Java uses <b>O</b>bject-<b>O</b>riented <b>P</b>rogramming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world. In OOP, each object is an independent unit with a <b>unique identity</b>, just as objects in the real world are. An apple is an object; so is a mug. Each has its unique <b>identity</b>. It's possible to have two mugs that look identical, but they are still separate, unique objects. Objects also have <b>characteristics</b>, which are used to describe them. @For example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called <b>attributes</b>. An attribute describes the current state of an object. In the real world, each object behaves in its own way. The car moves, the phone rings, and so on.The same applies to objects:<b> behavior</b> is specific to the object's type.<br><br>In summary, in object oriented programming, each object has three dimensions: <b>identity, attributes, and behavior.</b> Attributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.",
      "taskWhatsNext" : 1,
      "taskType" : 1,
      "lessonKeyWords" : ["object orientated","programming","object","unique"]
    },
    {
      "taskName": "Classes",
      "taskNumber": 1,
      "sectionNumber": 8,
      "taskText": "A <b>class</b> describes what the object will be, but is separate from the object itself. <br>In other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.Each class has a name, and each is used to define<b> attributes</b> and <b>behavior</b>. Some examples of attributes and behavior:@_picture8_1@In other words, an object is an instance of a class.",
      "taskWhatsNext": 2,
      "taskType": 1,
      "lessonKeyWords": ["classes","blueprint","name","attributes","behaviour"]
    },
    {
      "taskName": "Classes",
      "taskNumber": 2,
      "sectionNumber": 8,
      "taskText": "A class defines: ",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 2,
      "exerciseSolutionStringArray": ["values and apples","attributes and behaviour","behaviour and values","values and attributes"],
      "exerciseSolutionInt" : 2
    },
    {
      "taskName" : "Creating Classes",
      "taskNumber" : 3,
      "sectionNumber": 8,
      "taskText" : "In order to create your own custom objects, you must first create the corresponding classes. This is accomplished by right clicking on the src folder in Eclipse or your Editor and selecting Create->New->Class. Give your class a name and click <b>Finish</b> to add the new class to your project: @_picture8_3@As you can see, Eclipse has already added the initial code for the class.<br>Now lets create a simple method in our new class.<br><b>Animal.java</b> @_picturecode8_3@We declared a <b>bark()</b> method in our <b>Animal</b> class. Now, in order to use the class and it's methods, we need to declare an<b> object</b> of that class.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["class name","create a class"]
    },
    {
      "taskName": "Creating Classes",
      "taskNumber": 4,
      "sectionNumber": 8,
      "taskText": "Fill in the blanks to create a class with a single method called \"test\". ",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 3,
      "exerciseSolutionStringArray": ["class","test()","out","println"],
      "exerciseContentStringArray": ["public @#@ A {"," public void @#@ {","  System.@#@.@#@(\"Hi\");"," }","}"]

    },
    {
      "taskName" : "Creating Objects",
      "taskNumber" : 5,
      "sectionNumber": 8,
      "taskText" : "Let's head over to our <b>main</b> and create a new object of our class.<br><b>MyClass.java</b>@_picturecode8_5@Now, <b>dog</b> is an object of type <b>Animal.</b> Thus we can call its <b>bark()</b> method, using the name of the object and a <b>dot</b>. The <b>dot </b> notation is used to access the object's <b>attributes and methods.</b>@You have just created your first object!",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["new object","create an object"]
    },
    {
      "taskName": "Creating Objects",
      "taskNumber": 6,
      "sectionNumber": 8,
      "taskText": "Drag and drop from the options below to create an object of the A class in the B class and call its \"test\" method.",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 4,
      "exerciseSolutionStringArray":["class","create","B","A","test()","object","new"],
      "exerciseContentStringArray": ["public @#@A {"," public void test() {","  System.out.println(\"Hi\"); }","}","class B {","  public static void main(String args[ ]) {"," @#@ obj = @#@ A();"," obj.@#@; }","}"],
      "exerciseSolutionIntArray" : [0,3,6,4]
    },
    {
      "taskName" : "Defining Attributes",
      "taskNumber" : 7,
      "sectionNumber": 8,
      "taskText" : "A class has <b>attributes</b> and <b>methods.</b> The attributes are basically variables within a class.<br>Let's create a class called <b>Vehicle</b>, with its corresponding attributes and methods. @_picturecode8_7@<b>maxSpeed, wheels, color</b>, and <b>fuelCapacity</b> are the attributes of our Vehicle class, and<b> horn()</b> is the only method.<br>You can define as many attributes and methods as necessary.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["attributes","variables in a class","as many as you want"]
    },
    {
      "taskName": "Defining Attributes",
      "taskNumber": 8,
      "sectionNumber": 8,
      "taskText": "Give this class these attributes: age of type int, height as a double, and name as a string.",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 6,
      "exerciseSolutionString": "classPerson{intage;doubleheight;Stringname;}",
      "exerciseContentStringArray": ["class Person{\n\n\n}"]
    },
    {
      "taskName" : "Creating an Object",
      "taskNumber" : 9,
      "sectionNumber": 8,
      "taskText" : "Next, we can create multiple objects of our <b>Vehicle</b> class, and use the dot syntax to access their attributes and methods. @_picturecode8_9@ ",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["multiple objects","syntax"]
    },
    {
      "taskName": "Creating an Object",
      "taskNumber": 10,
      "sectionNumber": 8,
      "taskText": "Fill in the blanks to create two objects from the class \"people\".",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 3,
      "exerciseSolutionStringArray": ["new","people","()"],
      "exerciseContentStringArray": ["people obj1 = @#@ people();","#@obj2 = new people@#@;"]
    },
    {
      "taskName" : "Access Modifiers",
      "taskNumber" : 11,
      "sectionNumber": 8,
      "taskText" : "Now let's discuss the <b>public</b> keyword in front of the main method.@<b>public</b> static void main(String[ ] args)@<b>public</b> is an <b>access modifier,</b> meaning that it is used to set the level of access. You can use access modifiers for classes, attributes, and methods.@For classes, the available modifiers are public or default (left blank), as described below:<br><br><b>public:</b> The class is accessible by any other class.<br><br><b>default</b>: The class is accessible only by classes in the same package.@<br>The following choices are available for attributes and methods:<br><br><b>default:</b> A variable or method declared with no access control modifier is available to any other class in the same package.<br><br><b>public:</b> Accessible from any other class.<br><b><br>protected:</b> Provides the same access as the default access modifier, with the addition that subclasses can access protected methods and variables of the superclass (Subclasses and superclasses are covered in upcoming lessons).<br><b>private:</b> Accessible only within the declared class itself<br><br>Example: @_picturecode8_11@It's a best practice to keep the variables within a class private. The variables are accessible and modified using <b>Getters and Setters. </b>",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["access modifiers","public","private","protected","in classes, objects and methods"]
    },
    {
      "taskName": "Access Modifiers",
      "taskNumber": 12,
      "sectionNumber": 8,
      "taskText": "Which of the following is no valid access modifiers?",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 2,
      "exerciseSolutionStringArray" : [ "public","private","protected" ,"hidden"],
      "exerciseSolutionInt": 4
    },
    {
      "taskName" : "Getters & Setters",
      "taskNumber" : 13,
      "sectionNumber": 8,
      "taskText" : "<b>Getters</b> and <b>Setters</b> are used to effectively protect your data, particularly when creating classes. For each variable, the <b>get</b> method returns its value, while the <b>set</b> method sets the value.<br><br><b>Getters</b> start with <b>get</b>, followed by the variable name, with the first letter of the variable name capitalized.<br><br><b>Setters</b> start with <b>set</b>, followed by the variable name, with the first letter of the variable name capitalized.<br>Example:@_picturecode8_13@The<b> getter</b> method returns the value of the attribute.<br>The <b>setter</b> method takes a parameter and assigns it to the attribute.<br><br>The keyword <b>this</b> is used to refer to the current object. Basically, <b>this.color</b> is the <b>color</b> attribute of the current object.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["Getters","Setters","protect","access variables"]
    },
    {
      "taskName": "Getters and Setters",
      "taskNumber": 14,
      "sectionNumber": 8,
      "taskText": "Drag and drop from the options below to define the set and get methods.",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 4,
      "exerciseSolutionStringArray": ["int","String","double","void","x"],
      "exerciseContentStringArray": ["class A{"," private int x;"," public @#@ getX(){","   return @#@;"," }"," public @#@ setX(int x){","   this.x = x;"," }","}"],
      "exerciseSolutionIntArray" : [0, 4, 3]
    },
    {
      "taskName" : "Getters & Setters",
      "taskNumber" : 15,
      "sectionNumber": 8,
      "taskText" : "Once our getter and setter have been defined, we can use it in our <b>main:</b>@_picturecode8_15@Getters and setters allow us to have control over the values. You may, for example, validate the given value in the setter before actually setting the value.<br>Getters and setters are fundamental building blocks for <b>encapsulation</b>, which will be covered in the next module.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["control over values","getter","setter"]
    },
    {
      "taskName": "Getters & Setters ",
      "taskNumber": 16,
      "sectionNumber": 8,
      "taskText": "What would the name of the setter method for the class variable named \"age\" be?",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray" : ["Age","setAge","initAge","getAge"],
      "exerciseSolutionInt" : 2
    },
    {
      "taskName" : "Constructors",
      "taskNumber" : 17,
      "sectionNumber": 8,
      "taskText" : "<b>Constructors </b>are special methods invoked when an object is created and are used to initialize them. <br>A constructor can be used to provide initial values for object attributes.@- A constructor <b>name</b> must be same as its class name.<br>- A constructor must have <b>no</b> explicit return type.<br><br>Example of a constructor:@_picturecode8_17_1@The <b>Vehicle()</b> method is the constructor of our class, so whenever an object of that class is created, the color attribute will be set to \"Red\". A constructor can also take parameters to initialize attributes.@_picturecode8_17_2@You can think of constructors as methods that will set up your class by default, so you don’t need to repeat the same code every time.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["constructor","when object created","initialize objects"]
    },
    {
      "taskName": "Constructors",
      "taskNumber": 18,
      "sectionNumber": 8,
      "taskText": "Write a Constructor for the class Person that takes an int myAge parameter an sets the age of the Person",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 6,
      "exerciseSolutionString": "classPerson{privateintage;Person(intmyAge){age=myAge;}}",
      "exerciseContentStringArray": ["class Person{\n private int age;\n\n}"]
    },
    {
      "taskName" : "Using Constructors",
      "taskNumber" : 19,
      "sectionNumber": 8,
      "taskText" : "The constructor is called when you create an object using the <b>new</b> keyword. <br><b>Example:</b> @_picturecode8_19@This will call the constructor, which will set the<b> color</b> attribute to \"Blue\".",
      "taskWhatsNext" : 1,
      "taskType" : 1,
      "lessonKeyWords" : ["new","call constructor"]
    },
    {
      "taskName" : "Multiple Constructors",
      "taskNumber" : 20,
      "sectionNumber": 8,
      "taskText" : "A single class can have <b>multiple constructors</b> with different numbers of parameters.<br>The setter methods inside the constructors can be used to set the attribute values.<br>Example:@_picturecode8_20_1@The class above has two constructors, one without any parameters setting the color attribute to a default value of \"Red\", and another constructor that accepts a parameter and assigns it to the attribute. <br>Now, we can use the constructors to create objects of our class.@_picturecode8_20_2@Java automatically provides a <b>default constructor</b>, so all classes have a constructor, whether one is specifically defined or not.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["multiple constructors","different parameters"]
    },
    {
      "taskName": "Constructors",
      "taskNumber": 21,
      "sectionNumber": 8,
      "taskText": "Order these lines to create valid code",
      "taskWhatsNext": 3,
      "taskType": 2,
      "exerciseViewType": 5,
      "exerciseSolutionStringArray" : ["TEXT2","TEXT1","TEXT4","TEXT0","TEXT3","TEXT5"],
      "exerciseContentStringArray" : ["  x = val;", "private int x;","class A{"," }"," public A(int val){","}"]
  }
  ]
}