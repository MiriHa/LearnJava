{
  "tasks": [
    {
      "taskType" : 1,
      "taskName" : "Your first Java program",
      "taskNumber" : 0,
      "sectionNumber": 2,
      "taskText" : "Let's start by creating a simple program that prints <b>“Hello World”</b> to the screen.@_picturecode1_0@In Java, every line of code that can actually run needs to be inside a class.<br>In our example, we named the class MyClass. You will learn more about classes in the upcoming modules.<br><br>In Java, each application has an <b>entry point</b>, or a starting point, which is a method called <b>main</b>. Along with main, the keywords public and static will also be explained later.@<b>As a summary:</b><br>- Every program in Java must have a class.<br>- Every Java program starts from the main method.",
      "taskWhatsNext" : 2,
      "lessonKeyWords" : ["Hello World", "System.out.println", "main", "method", "class"]
    },
    {
      "taskName": "Your first Java program",
      "taskNumber": 1,
      "sectionNumber": 2,
      "taskText": "Which method is the starting point for all Java programs?",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 1,
      "exerciseSolutionStringArray": ["main"]
    },
    {
      "taskType": 1,
      "taskName" : "The main method",
      "taskNumber": 2,
      "sectionNumber": 2,
      "taskText": "To run our program, the main method must be identical to this signature:@<br><b>   public static void main(String[ ] args)</b><br>@  <b>public</b>: anyone can access it<br> <br><b>static:</b> method can be run without creating an instance of the class containing the main method<br> <br><b>void:</b> method doesn't return any value<br><br> <b>main:</b> the name of the method@For example, the following code declares a method called test, which does not return anything and has no parameters:@    <b>void test(){}</b>@The method's parameters are declared inside the parentheses that follow the name of the method.<br>For main, it's an array of strings called <b>args</b>. We will use it in our next lesson, so don't worry if you don't understand it all now.",
      "taskWhatsNext": 2,
      "lessonKeyWords": ["main method","starting point", "curly brackets","program"]
    },
    {
      "taskName": "The main method",
      "taskNumber": 3,
      "sectionNumber": 2,
      "taskText": "Write the full signature of the main method:",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 6,
      "exerciseSolutionString": "public static void main(String[] args)",
      "exerciseContentStringArray" : [""]
    },
    {
      "taskName": "Displaying text",
      "taskNumber": 4,
      "sectionNumber": 2,
      "taskText" : "Next is the body of the main method, enclosed in curly braces:@_picturecode1_4@The <b>println</b> method prints a line of text to the screen.<br>The System class and its out stream are used to access the println method.@In classes, methods, and other flow-control structures code is always enclosed in <b>curly braces { }</b>.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["System.out.println", "print", "text","display text"]
    },
    {
      "taskName": "Displaying text",
      "taskNumber": 5,
      "sectionNumber": 2,
      "taskText": "Which method prints text in a Java program?",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray": ["System.printText()","System.out()","System.out.println()","out.writeText()"],
      "exerciseSolutionInt" : 3
    },
    {
      "taskName": "Semicolons in Java",
      "taskNumber": 6,
      "sectionNumber": 2,
      "taskText" : "You can pass a different text as the parameter to the <b>println method</b> to print it.@_picturecode1_6@In Java, each code statement must end with a <b>semicolon</b>. @Remember: Do <b>not</b> use semicolons after method and class declarations that follow with the body defined using the curly braces.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["Semicolons",";","parameters","statement","ends"]
    },
    {
      "taskName": "Java program",
      "taskNumber": 7,
      "sectionNumber": 2,
      "taskText": "Fill in the blanks to create a valid Java Program:",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 3,
      "exerciseContentStringArray" : ["#@Apples {","public static void@#@(String[ ]args)","{"," System.out.println(","  \"Hello, World!\")@#","}", "}"],
      "exerciseSolutionStringArray" : ["class","main",";"]
    },
    {
      "taskName": "Comments",
      "taskNumber": 8,
      "sectionNumber": 2,
      "taskText" : "The purpose of including <b>comments</b> in your code is to explain what the code is doing. Java supports both <b>single and multi-line</b> comments. All characters that appear within a comment are ignored by the Java compiler.@A single-line comment starts with two forward slashes and continues until it reaches the end of the line. <br><b>For example:@_picturecode1_8@Adding comments as you write code is a <b>good practice</b>, because they provide clarification and understanding when you need to refer back to it, as well as for others who might need to read it.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["comments","//","good practice","single-line"]
    },
    {
      "taskName": "Single-line Comments",
      "taskNumber": 9,
      "sectionNumber": 2,
      "taskText": "Single-line comments are created using:",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray": ["// Characters at the end of the line","*/ characters at the beginning of the line","// Characters at the beginning of the line","** Characters at the beginning of the line"],
      "exerciseSolutionInt" : 3
    },
    {
      "taskName": "Multi-line Comments",
      "taskNumber": 10,
      "sectionNumber": 2,
      "taskText" : "Java also supports comments that span <b>multiple lines.</b><br>You start this type of comment with a forward slash followed by an asterisk, and end it with an asterisk followed by a forward slash. <br>For example:@_picturecode1_10@Note that Java does not support nested multi-line comments. However, you can nest single-line comments within multi-line comments. @_picturecode1_101@Another name for a Multi-Line comment is a <b>Block comment</b>.",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["comments","/*","good practice","Multi-line","*/"]
    },
    {
      "taskName": "Multi-line Comments",
      "taskNumber": 11,
      "sectionNumber": 2,
      "taskText": "Make this a multi-line comment:",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 4,
      "exerciseContentStringArray" : ["#@some","  comment text","#"],
      "exerciseSolutionStringArray" : [" /* "," // "," ** "," */ "," || "," // "],
      "exerciseSolutionIntArray" : [0,3]
    },
    {
      "taskName": "Documentation Comments",
      "taskNumber": 12,
      "sectionNumber": 2,
      "taskText"  : "Documentation comments are special comments that have the appearance of multi-line comments, with the difference being that they <b>generate external documentation</b> of your source code. These begin with a forward slash followed by two asterisks, and end with an asterisk followed by a forward slash. <br>For example:@_picturecode1_12@Javadoc is a tool which comes with JDK and it is used for generating Java code documentation in HTML format from Java source code which has required documentation in a predefined format.@When a documentation comment begins with more than two asterisks, Javadoc assumes that you want to create a \"box\" around the comment in the source code. It simply ignores the extra asterisks.<br>For example:@_picturecode1_121@This will retain just the text \"This is the start of a method\" for the documentation.",
      "taskWhatsNext": 2,
      "taskType" : 1,
      "lessonKeyWords" : ["comments","/**","good practice","documentation comments","*/"]
    },
    {
      "taskName": "Documentation Comments",
      "taskNumber": 13,
      "sectionNumber": 2,
      "taskText": "You can add a Java doc style comment by using:",
      "taskWhatsNext": 3,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray": ["/* and */ character to wrap a comment","/** and */ characters to wrap a comment","// characters in the beginning of the line","// and */ characters to wrap a comment"],
      "exerciseSolutionInt" : 2
    }
  ]

}