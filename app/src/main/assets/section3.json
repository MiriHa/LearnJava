{
  "tasks": [
    {
      "taskName" : "Different Data Types",
      "taskNumber" : 0,
      "taskText" : "In Java, there are different types of data types, that are used to define variables.\nFor example:@String - stores text, such as \"Hello\". \nString values are surrounded by double quotes@char - stores single characters, such as 'a' or 'B'. \nChar values are surrounded by single quotes@int - stores integers (whole numbers), without decimals, such as 123 or -123@float - stores floating point or real numbers with optional decimal points, such as 19.99 or -19.99. \nSufficient for storing 6 to 7 decimal digits @double - stores floating-point or real numbers with optional decimal points, such as 3.1416, -55.66. \nSufficient for storing 15 decimal digits @boolean - stores values with two states: true or false@! It is important to note that a variable is associated with a type, and is only capable of storing values of that particular type. For example, an int variable can store integer values, such as 123; but it cannot store real numbers, such as 12.34, or texts, such as \"Hello\".",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["data types","String","int","double","float","boolean"]
    },
    {
      "taskName": "Different Data Types",
      "taskNumber": 2,
      "taskText" : "What DataType is the value \"Tree\"?",
      "taskWhatsNext" : 2,
      "taskType" : 2,
      "exerciseViewType": 1,
      "exerciseSolutionString": "String"
    },
    {
      "taskName": "Different Data Types",
      "taskNumber": 2,
      "taskText": "For what is the data type float used?",
      "taskWhatsNext": 1,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray" : ["For storing Integers(whole Numbers) without decimals","For storing number with optional decimal points","For storing text","for storing values with two stated"],
      "exerciseSolutionInt" : 2
    },
    {
      "taskName": "Variables",
      "taskNumber": 3,
      "taskText" : "Variables are containers for storing data values. \nTo create a variable, you must specify the type, give it an identifier and assign it a value:@     type variable = value;@Where type is one of Java's types (such as int or String), and variable is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.@To create a variable that should store text, look at the following example:@Create a variable called name of type String and assign it the value \"John\":@     String name = \"John\";@! You can use a comma-separated list to declare more than one variable of the specified type.\nExample: int a = 42, b = 11;",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["variables","store","data","data types","assign"]
    },
    {
      "taskName": "Variables",
      "taskNumber": 4,
      "taskText": "Which data Type would you use for the age of a person?",
      "taskWhatsNext": 2,
      "taskType" : 2,
      "exerciseViewType" : 2,
      "exerciseSolutionStringArray" : ["String","float","double","Int"],
      "exerciseSolutionInt" : 3
    },
    {
      "taskName": "Variables",
      "taskNumber": 5,
      "taskText" : "Create a variable called \"cityName\" and assign the value \"munich\" to it:",
      "taskWhatsNext" : 1,
      "taskType" : 2,
      "exerciseViewType": 1,
      "exerciseSolutionString": "String cityName = \"munich\""
    },
    {
      "taskName": "Variables",
      "taskNumber": 6,
      "taskText" : "Examples of variable declarations:@class MyClass {\n      public static void main(String[ ] args) \n          String name =\"David\";\n          int age = 42;\n          double score =15.9;\n          char group = 'Z';\n      }\n   }@char stands for character and holds a single character. @The type is the Boolean type, which has only two possible values: true and false. This data type is used for simple flags that track true/false conditions.\nFor example: @      boolean online = true;@You can use a comma-separated list to declare more than one variable of the specified type. \nExample: int a = 42, b = 11;",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["variables","declare","types","boolean"]
    },
    {
      "taskName": "Variables",
      "taskNumber": 7,
      "taskText": "Drag and drop from the options below to have a valid Java program.",
      "taskWhatsNext": 1,
      "taskType": 2,
      "exerciseViewType": 4,
      "exerciseSolutionStringArray":["int","true","boolean","float","String","void","class"],
      "exerciseContentStringArray":["class Person{"," public static void main(String[ ]args){","  @#@name = \"John\";","  @#@age = 24;","  @#@height = 189,87;"," }","}"],
      "exerciseSolutionIntArray": [4,0,3]
    },
    {
      "taskName": "Displaying Variables",
      "taskNumber": 8,
      "taskText" : "The println() method is often used to display variables. To combine both text and a variable, use the+ character:@String name = \"John\";\n   System.out.println(\"Hello \" + name);@You can also use the + character to add a variable to another variable:@     String firstName = \"John \";\n     String lastName = \"Doe\";\n     String fullName = firstName + lastName;\n     System.out.println(fullName);@! For numeric values, the + character works as a mathematical operator \n   int x = 5, y = 6;\n   System.out.println(x + y);\n   // Print the value of x + y",
      "taskWhatsNext" : 2,
      "taskType" : 1,
      "lessonKeyWords" : ["variables","displaying","+","println"]
    },
    {
      "taskName": "Displaying Variables",
      "taskNumber": 9,
      "taskText" : "What is the Output of this Code?\n\nclass Person{\n  public static void main (String[]args){\n    String name = “John”;\n         int age = 30;\n         String lastname = “Smith”;\n         Sytem.out.println(\n“name ”:  + name + \"  \" +lastname \n+ “, age:  ” + age);\n     }\n}",
      "taskWhatsNext" : 3,
      "taskType" : 2,
      "exerciseViewType": 1,
      "exerciseSolutionString": "name: John Smith, age: 30"
    }
  ]

}